/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/AWTForms/Frame.java to edit this template
 */
package com.codechum.awt.image;

/**
 *
 * @author alysa
 */

import java.awt.*;
import java.awt.event.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;

public class ImageResizer extends java.awt.Frame {

    /**
     * Creates new form ImageResizer
     */
    
    private BufferedImage originalImage;
    private BufferedImage resizedImage;
    private int maxScrollbarValue;
    
    public ImageResizer() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        button1 = new java.awt.Button();
        canvas1 = new java.awt.Canvas();
        scrollbar1 = new java.awt.Scrollbar();

        setTitle("Image Resizer");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        button1.setLabel("Open");
        button1.setName("openFileButton"); // NOI18N
        button1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button1ActionPerformed(evt);
            }
        });
        add(button1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, -1, -1));

        canvas1.setName("imageCanvas"); // NOI18N
        add(canvas1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 80, 830, 460));

        scrollbar1.setName("resizerScrollBar"); // NOI18N
        scrollbar1.setOrientation(java.awt.Scrollbar.HORIZONTAL);
        scrollbar1.addAdjustmentListener(new java.awt.event.AdjustmentListener() {
            public void adjustmentValueChanged(java.awt.event.AdjustmentEvent evt) {
                scrollbar1AdjustmentValueChanged(evt);
            }
        });
        add(scrollbar1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 560, 830, 30));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Exit the Application
     */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        System.exit(0);
    }//GEN-LAST:event_exitForm

    private void scrollbar1AdjustmentValueChanged(java.awt.event.AdjustmentEvent evt) {//GEN-FIRST:event_scrollbar1AdjustmentValueChanged
        // TODO add your handling code here:
        int newWidth = evt.getValue();
        resizeImage(newWidth);
        redrawCanvas();
    }//GEN-LAST:event_scrollbar1AdjustmentValueChanged

    private void button1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button1ActionPerformed
        // TODO add your handling code here:
        FileDialog fileDialog = new FileDialog(this, "Open Image", FileDialog.LOAD);
        fileDialog.setName("fileDialog");
        fileDialog.setFile("*.jpg;*.jpeg;*.png");
        fileDialog.setVisible(true);

        String directory = fileDialog.getDirectory();
        String file = fileDialog.getFile();

        if (directory != null && file != null) {
            String filePath = directory + file;

            try {
                originalImage = ImageIO.read(new File(filePath));
                maxScrollbarValue = originalImage.getWidth();
                scrollbar1.setMaximum(maxScrollbarValue);
                resizedImage = originalImage;
                redrawCanvas();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_button1ActionPerformed

     private void redrawCanvas() {
        canvas1.repaint();
    }
     
    private void resizeImage(int newWidth) {
        if (originalImage != null) {
            double scaleFactor = (double) newWidth / originalImage.getWidth();
            int newHeight = (int) (originalImage.getHeight() * scaleFactor);

            resizedImage = new BufferedImage(newWidth, newHeight, BufferedImage.TYPE_INT_ARGB);
            Graphics2D g2d = resizedImage.createGraphics();
            g2d.drawImage(originalImage, 0, 0, newWidth, newHeight, null);
            g2d.dispose();
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ImageResizer().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Button button1;
    private java.awt.Canvas canvas1;
    private java.awt.Scrollbar scrollbar1;
    // End of variables declaration//GEN-END:variables

    private class ResizableCanvas extends Canvas {
        private BufferedImage offScreenImage;

        @Override
        public void paint(Graphics g) {
            update(g);
        }

        @Override
        public void update(Graphics g) {
            if (offScreenImage == null || offScreenImage.getWidth() != getWidth() || offScreenImage.getHeight() != getHeight()) {
                offScreenImage = new BufferedImage(getWidth(), getHeight(), BufferedImage.TYPE_INT_ARGB);
            }

            Graphics offScreenGraphics = offScreenImage.getGraphics();

            // Set the background color to white
            offScreenGraphics.setColor(Color.WHITE);
            offScreenGraphics.fillRect(0, 0, getWidth(), getHeight());

            if (resizedImage != null) {
                offScreenGraphics.drawImage(resizedImage, 0, 0, this);
            }

            g.drawImage(offScreenImage, 0, 0, this);
            offScreenGraphics.dispose();
        }
    }
}
